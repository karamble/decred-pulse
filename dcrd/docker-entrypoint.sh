#!/bin/sh
# Copyright (c) 2015-2025 The Decred developers
# Use of this source code is governed by an ISC
# license that can be found in the LICENSE file.

set -e

# Certificate paths (shared volume for backend access)
CERT_DIR="/certs"
RPC_CERT="${CERT_DIR}/rpc.cert"
RPC_KEY="${CERT_DIR}/rpc.key"

# Create certificate directory if it doesn't exist
mkdir -p "${CERT_DIR}"

# Generate certificates if they don't exist
if [ ! -f "${RPC_CERT}" ] || [ ! -f "${RPC_KEY}" ]; then
    echo "Generating TLS certificates for dcrd RPC..."
    
    # Check if certgen is the real binary or our openssl fallback
    if certgen --help 2>&1 | grep -q "dcrd"; then
        # Real certgen from dcrd
        echo "Using dcrd certgen tool..."
        certgen --host=dcrd \
                --host=dcrwallet \
                --host=localhost \
                --host=127.0.0.1 \
                --host=0.0.0.0 \
                --host=$(hostname) \
                --directory="${CERT_DIR}" \
                --org="dcrd autogenerated cert" \
                --duration=8760h
    else
        # Fallback to openssl
        echo "Using openssl fallback..."
        openssl req -x509 -nodes -newkey rsa:2048 \
                -keyout "${RPC_KEY}" \
                -out "${RPC_CERT}" \
                -days 365 \
                -subj "/O=dcrd autogenerated cert" \
                -addext "subjectAltName=DNS:dcrd,DNS:dcrwallet,DNS:localhost,IP:127.0.0.1"
    fi
    
    echo "✓ TLS certificates generated successfully"
    echo "  Certificate: ${RPC_CERT}"
    echo "  Private Key: ${RPC_KEY}"
else
    echo "✓ Using existing TLS certificates from ${CERT_DIR}"
fi

# Execute dcrd with all provided arguments
# The --rpccert and --rpckey parameters should be passed via docker-compose command
# DCRD_EXTRA_ARGS can be set via environment variable for additional flags
if [ -n "$DCRD_EXTRA_ARGS" ]; then
    echo "Starting dcrd with extra args: $DCRD_EXTRA_ARGS"
    # shellcheck disable=SC2086
    exec dcrd "$@" $DCRD_EXTRA_ARGS
else
    exec dcrd "$@"
fi

